<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NASA Sunburst Visualizer</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      text-align: center;
    }
    #file-input {
      margin-bottom: 20px;
    }
    #filters {
      margin-bottom: 20px;
    }
    select {
      margin: 0 10px;
      padding: 4px;
    }
    #path-box {
      height: 40px;
      margin-bottom: 20px;
      font-size: 18px;
      font-weight: bold;
      border: 2px solid #ccc;
      padding: 10px;
      width: 80%;
      margin-left: auto;
      margin-right: auto;
    }
    #container {
      display: flex;
      justify-content: center;
      gap: 40px;
      flex-wrap: wrap;
    }
    #legend {
      min-width: 250px;
      text-align: left;
    }
    .legend-item {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
      gap: 8px;
    }
    .legend-color {
      width: 20px;
      height: 20px;
      border: 1px solid #ccc;
    }
    .legend-labels {
      display: flex;
      flex-direction: column;
    }
    .legend-function {
      font-weight: bold;
    }
    .legend-centers {
      font-size: 12px;
      color: #555;
    }
    svg {
      width: 600px;
      height: 600px;
    }
    #data-table {
      margin-top: 40px;
      border-collapse: collapse;
      margin-left: auto;
      margin-right: auto;
    }
    #data-table th, #data-table td {
      border: 1px solid #ccc;
      padding: 8px 16px;
      text-align: left;
    }
    #data-table td.surface-cell {
      font-weight: bold;
      color: white;
    }
  </style>
</head>
<body>
  <input type="file" id="file-input" accept=".csv" />
  <div id="filters">
    <label>Filter by Surface Function:</label>
    <select id="surfaceFilter" multiple></select>
    <label>Filter by Center:</label>
    <select id="centerFilter" multiple></select>
  </div>
  <div id="path-box">Hover over a section to see its path</div>
  <div id="container">
    <div id="legend"></div>
    <div id="chart"></div>
  </div>
  <div id="table-container"></div>

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script>
    const colors = d3.schemeCategory10;
    const unallocatedColor = "#000000";
    const width = 600;
    const radius = width / 2;

    let surfaceColorMap = {};
    let surfaceCentersMap = new Map();
    let originalData = [];
    let colorScale = d3.scaleOrdinal(colors);

    const partition = d3.partition().size([2 * Math.PI, radius]);
    const arc = d3.arc()
      .startAngle(d => d.x0)
      .endAngle(d => d.x1)
      .innerRadius(d => d.y0)
      .outerRadius(d => d.y1);

    document.getElementById('file-input').addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = function (event) {
        const csvText = event.target.result;
        originalData = d3.csvParseRows(csvText);
        updateVisualization();
      };
      reader.readAsText(file);
    });

    function getFilters() {
      const surfaceVals = Array.from(document.getElementById('surfaceFilter').selectedOptions).map(o => o.value);
      const centerVals = Array.from(document.getElementById('centerFilter').selectedOptions).map(o => o.value);
      return { surfaceVals, centerVals };
    }

    function updateVisualization() {
      clearAll();
      const { surfaceVals, centerVals } = getFilters();
      const { hierarchy, flatTable } = parseData(originalData, surfaceVals, centerVals);
      drawSunburst(hierarchy);
      buildLegend();
      buildTable(flatTable);
      buildFilters(originalData);
    }

    function clearAll() {
      d3.select("#chart").html("");
      d3.select("#legend").html("");
      d3.select("#table-container").html("");
      surfaceColorMap = {};
      surfaceCentersMap.clear();
    }

    function parseData(rows, surfaceFilter, centerFilter) {
      const root = { name: "root", children: [] };
      const flatTable = [];
      let surfaceSet = new Set();
      let centerSet = new Set();

      rows.forEach(row => {
        if (row.length === 0) return;
        const surface = row[0].trim();
        const centers = [];
        const useCases = [];

        for (let i = 1; i < row.length; i++) {
          const val = row[i]?.trim();
          if (!val) continue;
          if (val.startsWith("UC")) useCases.push(val);
          else centers.push(val);
        }

        const centerList = centers.length > 0 ? centers : ["Unallocated"];
        const hasUnallocated = centerList.includes("Unallocated");
        const color = hasUnallocated ? unallocatedColor : colorScale(surface);

        if (
          (surfaceFilter.length === 0 || surfaceFilter.includes(surface)) &&
          (centerFilter.length === 0 || centerList.some(c => centerFilter.includes(c)))
        ) {
          surfaceColorMap[surface] = color;
          surfaceCentersMap.set(surface, centerList);

          useCases.forEach(uc => {
            flatTable.push({ surface, centers: centerList.join(", "), useCase: uc, color });
          });

          root.children.push({
            name: surface,
            children: [
              {
                name: centerList.join(", "),
                children: useCases.map(u => ({ name: u }))
              }
            ]
          });

          surfaceSet.add(surface);
          centerList.forEach(c => centerSet.add(c));
        }
      });

      updateFilterOptions('surfaceFilter', Array.from(surfaceSet));
      updateFilterOptions('centerFilter', Array.from(centerSet));

      root.children.sort((a, b) => b.children[0].children.length - a.children[0].children.length);
      return { hierarchy: root, flatTable };
    }

    function updateFilterOptions(id, values) {
      const select = document.getElementById(id);
      if (select.children.length > 0) return; // prevent overwriting user selection
      values.forEach(val => {
        const opt = document.createElement('option');
        opt.value = val;
        opt.textContent = val;
        select.appendChild(opt);
      });
      select.addEventListener('change', updateVisualization);
    }

    function drawSunburst(rootData) {
      const root = d3.hierarchy(rootData)
        .sum(d => d.children ? 0 : 1)
        .sort((a, b) => b.value - a.value);

      partition(root);

      const svg = d3.select("#chart").append("svg")
        .attr("viewBox", [0, 0, width, width])
        .append("g")
        .attr("transform", `translate(${radius},${radius})`);

      const pathBox = d3.select("#path-box");

      svg.selectAll("path")
        .data(root.descendants().filter(d => d.depth))
        .join("path")
        .attr("d", arc)
        .attr("fill", d => {
          const surface = d.ancestors().reverse()[1]?.data.name;
          return surfaceColorMap[surface] || "#ccc";
        })
        .on("mouseover", (event, d) => {
          const path = d.ancestors().reverse().slice(1).map(d => d.data.name).join(" > ");
          pathBox.text(path);
        });
    }

    function buildLegend() {
      const legend = d3.select("#legend");
      for (const [surface, color] of Object.entries(surfaceColorMap)) {
        const centers = surfaceCentersMap.get(surface)?.join(", ") || "Unallocated";
        const item = legend.append("div").attr("class", "legend-item");
        item.append("div")
          .attr("class", "legend-color")
          .style("background-color", color);
        const labels = item.append("div").attr("class", "legend-labels");
        labels.append("div").attr("class", "legend-function").text(surface);
        labels.append("div").attr("class", "legend-centers").text(centers);
      }
    }

    function buildTable(data) {
      const container = d3.select("#table-container");
      const table = container.append("table").attr("id", "data-table");
      const thead = table.append("thead").append("tr");
      thead.append("th").text("Surface Function");
      thead.append("th").text("Center(s)");
      thead.append("th").text("Use Case");

      const tbody = table.append("tbody");
      const grouped = d3.groups(data, d => d.surface);

      grouped.forEach(([surface, rows]) => {
        rows.forEach((row, i) => {
          const tr = tbody.append("tr");
          if (i === 0) {
            tr.append("td")
              .attr("rowspan", rows.length)
              .attr("class", "surface-cell")
              .style("background-color", row.color)
              .text(surface);
          }
          tr.append("td").text(row.centers);
          tr.append("td").text(row.useCase);
        });
      });
    }
  </script>
</body>
</html>
